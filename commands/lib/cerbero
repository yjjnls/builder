#
#
#
#

__file__=$(echo ${BASH_SOURCE[0]} )
__dir__=$(cd $(dirname ${BASH_SOURCE[0]}); pwd )
__builder__=$(cd $__dir__/../..; pwd)

function trace(){
   if [ ! -z $BUILDER_COMMANDS_DEBUG  ]; then
      if [ -f $BUILDER_COMMANDS_DEBUG ]; then
	     echo $@>>$BUILDER_COMMANDS_DEBUG
	  fi 
   fi
}
     #============================================#
     #       module command implement             #
     #============================================#

__config__=
__custom__=	 

__arch__=
__platform__=
__debug__=
__home__=



[ "x$(uname)" == "xLinux" ] && __platform__==linux

__cerbero_vars_file__=${__dir__}/cerbero_variants@cerbero
#import from $__cerbero_vars_file__

[ -f $__cerbero_vars_file__ ] && source $__cerbero_vars_file__


function package_version(){

   name=$1
   if [[ ($name == "build-tools") || ($name == "build_tools") ]]; then
      name="gstreamer-1.0"
   fi
   n=${#__CERBERO_PACKAGE[@]}
   for(( i=0 ; i < $n ; i++ ));
   do
       key=${__CERBERO_PACKAGE[$i]}
	   let i++
       if [ $key == $name ]; then
		   echo ${__CERBERO_PACKAGE[$i]}
		   return 0
	   fi
   done;
   return 1
}

function get_config(){
   name=$1
   n=${#__CERBERO_CONFIG[@]}
   for(( i=0 ; i < $n ; i++ ));
   do
       key=${__CERBERO_CONFIG[$i]}
	   let i++
       if [ "x$key" == "x$name" ]; then
		   echo ${__CERBERO_CONFIG[$i]}
		   return 0
	   fi
   done;
   trace "Not found cerbero.get_config $name"
   return 1
}

function _home(){
    
    local inifile=$($__dir__/inifile)
	local config=$($inifile.open $__config__)

    local section='cerbero'
    if [ ! -z $__custom__ ]; then
	   section="cerbero.${__custom__}"	   
	fi
	d=	
	if [ "x$(uname)" == "xLinux" ];then
		d=$($config.get $section home.linux)
	else
	    d=$($config.get $section home.windows)
	fi
	
	if [ ! -z $__custom__ ]; then
	    cd $(dirname $__config__)
		[ ! -z $d ] && cd $d
	    d= $PWD
	fi
	echo $d

}




function load(){
    local inifile=$($__dir__/inifile)
	local config=$($inifile $__config__)
	local homed=$(home)

	if [ ! -d $homed ]; then
	   git clone $( $config.get cerbero repo) $@ $homed
	fi
	
	
	if [ ! -d $homed ] ; then
	   EXCEPTION='can not load cerbero repos $(get_conf cerbero repo) to ${__cerbero_home__}'
	   return 1
	fi
	
	val=$($config.get git user.name)
	[ ! -z $val ] &&  git config user.name $val
	
	val=$($config.get git user.email)
	[ ! -z $val ] &&  git config user.email $val
	
	return 0
}


function load_cerbero_pkg_src(){
    local inifile=$($__dir__/inifile)
	local config=$($inifile $__config__)
	local homed=$__home__
	
    version=$1
	ext=$2
	cd $homed
	
	# [ -z $version ] && version=$( gstreamer_version )
	[ -z $ext ] && ext=tar.gz

	[ ! -d ~tmp ] && mkdir ~tmp 
	
	tarball=cerbero-${version}.${ext}


	if [ ! -d sources ]; then
		if [ ! -f ~tmp/${tarball} ] ; then
		    repo=$($config.get cerbero gstreamer-bundle-source-repo)
			[ -z $repo ] && repo=https://gstreamer.freedesktop.org/data/pkg/src
			url=${repo}/${version}/${tarball}
			wget --no-check-certificate $url -O ~tmp/${tarball} 
		fi
		
		echo "extracting ${tarball}"
		tar xf ~tmp/${tarball} -C ~tmp/
		mv  -f ~tmp/cerbero-${version}/sources ${homed}/sources
	fi


	[[  ! -d ${homed}/sources ]] && return 1
	return 0
}

function run(){
	cd ${__home__} &&
	./cerbero-uninstalled -c "$__cbc__" $@
}


function release_tag(){

    local name=$1
	local debug=$2
	local pkgname=$name
	local tagname=$name
	local platform=
	if [[ ($name == "build_tools") || ($name == "build-tools")  ]] ; then
	    tagname="gstreamer-build_tools"
		version=$(package_version 'gstreamer-1.0')
	elif [[ $name == 'base' ]] ; then
	    tagname="base"
		version=$(package_version 'gstreamer-1.0')
	elif [[ ($name == 'gstreamer') || ($name == 'gstreamer-1.0') ]] ; then
	    tagname="gstreamer"
		version=$(package_version 'gstreamer-1.0')

	else
	    version=$(package_version $name )	
		[ ! -z $__debug__ ] && tagname="${tagname}_d"
	fi
	
	
	rtag=${tagname}-${__platform__}-${__arch__}-${version}
	echo $rtag
}

function build_tools_pkg_name(){
    local version=$(package_version 'gstreamer-1.0')
    echo build_tools-${__platform__}-${__arch__}-${version}.tar.bz2
}

function release_dir(){
    local inifile=$($__dir__/inifile)
	local rdir=$( $inifile.get $__config__ cerbero 'release.dir')
	[ -z $rdir ] && rdir=$__builder__/releases
	echo $rdir
}

function release_repo(){
    local name=$1
	local option=$2
	local rtag=$(release_tag $name)
	if [ "x$option" == "--no-release-dir" ]; then
	   local inifile=$($__dir__/inifile)
	   echo $($inifile.get $__config__  release repo )/$rtag
	   return 0
	fi
	trace "release_repo: $name $option =>rtag $rtag "
	local rdir=$(release_dir)/$rtag
	if [ $name == build_tools ]; then
	   if [ -f $rdir/$(build_tools_pkg_name) ]; then
	       echo $rdir/$rtag
		   return 0
	   fi
	elif [ -f $rdir/Build.yaml ]; then
	   echo $rdir/$rtag
	   return 0
	fi
	local inifile=$($__dir__/inifile)
	echo $( $inifile.get $__config__  release repo )/$rtag	
}





__exports__=(
   load
   load_cerbero_pkg_src
   run
   get_config
   package_version
   release_tag
   build_tools_pkg_name
   release_dir
   release_repo
   
)
         #---------------------------
         #   Main
         #----------------------------

while [ ! -z $1 ] ; do
 opt=$1
 case $opt in
   -c|--config)
	  __cbc__=$2; shift 2
	  trace config $@
   ;;
   
   -i|--init-file)
	  __config__=$2;shift 2
	  trace ini $@
   ;;
   
   -u|--custom)
	  __custom__=$2;shift 2
   ;;
   *) 

   break
   ;;
  esac
done
__home__=$(_home)
__platform__=$(get_config platform)
__arch__=$(get_config arch)
__debug__=$(get_config build_type | tr  'A-Z' 'a-z')
[ "x$__debug__" != "xdebug" ] && __debug__=

trace "home:$__home__ platform:$__platform__ arch:$__arch__ debug:$__debug__"

if [ -z $1 ]; then	
	#intialization
	[ -f $__cerbero_vars_file__ ] && rm -f $__cerbero_vars_file__
	run cpm-vars --filename $__cerbero_vars_file__ 1>&2
	
	if [ -z $__custom__ ]; then
		echo "${__file__}  -c ${__cbc__} -i ${__config__} "
	else
		echo "${__file__}  -c ${__cbc__} -i ${__config__} -u ${__custom__} "
	fi
	exit 0
else

#call function
    shift
	for fn in ${__exports__[@]}
	do
	   if [[ "$opt" == ".${fn}"  ]];then
		  __home__=$(_home)
		  ${fn} $@
		  exit $?
	   fi
	done
fi








